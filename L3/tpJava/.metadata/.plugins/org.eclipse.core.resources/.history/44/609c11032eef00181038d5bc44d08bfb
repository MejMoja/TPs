package bataille;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.NavigableSet;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;

import attaque.Arme;
import protagoniste.Homme;
import protagoniste.Monstre;

public class GroupeHommes {
	private Set<Homme> groupe = new TreeSet<>();
	
	public void ajouterHommes(Homme... hommes) {
		for(Homme h : hommes) {
			groupe.add(h);
		}
	}
	
//	private class ComparateurHommes implements Comparator<Homme>{
//
//		@Override
//		public int compare(Homme o1, Homme o2) {
//			if(o1.getForceDeVie() == o2.getForceDeVie()) {
//				return o1.compareTo(o2);
//			}else {
//				return Integer.valueOf(o1.getForceDeVie()).compareTo(o2.getForceDeVie());
//			}
//		}
//		
//	}
//	
//	private class ComparateurArmes implements Comparator<Arme>{
//		private Monstre<?> m;
//		private TreeMap<Integer, Arme> mapArme = new TreeMap<>();
//		
//		public ComparateurArmes(Monstre<?> m) {
//			this.m = m;
//		}
//		@Override
//		public int compare(Arme o1, Arme o2) {
//			if(!Integer.valueOf(o1.getPointDeDegat()).equals(o2.getPointDeDegat())) {
//				mapArme.put(o1.getPointDeDegat(), o1);
//				mapArme.put(o2.getPointDeDegat(), o2);
//				Arme armeParfaite = mapArme.get(mapArme.ceilingKey(m.getForceDeVie()));
//				if(armeParfaite != null) {
//					if(armeParfaite.equals(o2)) {
//						return 1;
//					}else {
//						return -1;
//					}
//				}else {
//					armeParfaite = mapArme.get(mapArme.floorKey((m.getForceDeVie())));
//					if(armeParfaite.equals(o2)) {
//						return 1;
//					}else {
//						return -1;
//					}
//				}
//			}else {
//				return o1.compareTo(o2);
//			}
//		}	
//	}
	
private class ComparateurHommes implements Comparator<Homme>{
		
		public int compare(Homme h1, Homme h2) {
			if ( h1.getForceDeVie() == h2.getForceDeVie() ) 
				return h1.getNom().compareTo(h2.getNom());	
			 else 
				return new Integer(h1.getForceDeVie()).compareTo(h2.getForceDeVie());
		}
	
	}
	
	private class ComparateurArmes implements Comparator<Arme>{
		int pdvM;
		public ComparateurArmes(Monstre<?> monstre) {
			pdvM=monstre.getForceDeVie();
		}
		
		/* Methode de comparaison */
		public int compare(Arme a1, Arme a2) {
			if ( ( a1==null ) || ( a2 == null ) ) return 0;
			int degatA1=a1.getPointDeDegat();
			int degatA2=a2.getPointDeDegat();
			Arme armeParfaite;
			if ( degatA1 != degatA2 ) {
				TreeMap<Integer,Arme> classementForce=new TreeMap<Integer, Arme>();
				classementForce.put(a1.getPointDeDegat(), a1);
				classementForce.put(a2.getPointDeDegat(), a2);  
				if((armeParfaite = classementForce.get(pdvM))!=null || (armeParfaite = classementForce.floorEntry(pdvM).getValue())!=null ) {
                    if(armeParfaite.equals(a1)) return -1;
                    else return 1;
                }else {
                    if(classementForce.ceilingKey(pdvM)==degatA1) return 1;
                    else return -1;
				}
			}else return a1.getNom().compareTo(a2.getNom());
		}

	}
	
	public List<Homme> choixCampHomme(Bataille bataille) {
		Monstre<?> m = bataille.getCampMonstres().selectionner();
		TreeMap<Arme, SortedSet<Homme>> hommesArmes = new TreeMap<>(new ComparateurArmes(m));

		for(Homme h : groupe) {
			h.choisirArme(m);
			if(h.getArmeChoisie() != null) {
				if(hommesArmes.containsKey(h.getArmeChoisie())) {
					hommesArmes.get(h.getArmeChoisie()).add(h);
				}else {
					SortedSet<Homme> s = new TreeSet<>(new ComparateurHommes());
					s.add(h);
					hommesArmes.put(h.getArmeChoisie(), s);
				}
			}
		}
		
		SortedSet<Homme> t = new TreeSet<Homme>();
		List<Homme> listeHomme = new ArrayList<Homme>();
		NavigableSet<Arme> keyview = hommesArmes.descendingKeySet();
		for(Arme a : keyview) {
			t = hommesArmes.get(a);
			for(Homme h : t) {
				if(listeHomme.size() <= 3) {
					listeHomme.add(h);
				}else {
					return listeHomme;
				}
				
			}
		}
		return listeHomme;
		
	}
}
