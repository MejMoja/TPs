Definition fx := fun (T:Type) (f:T -> T) x => f (f x).
Check fx.

Definition fy := (fun f x => f (f x)) (fun x => x+3) 1.
Check fy.

Definition f1 (a:Type) (b:Type) (x:a) (f:a->b) := f x.
Check f1.

Definition f2 := f1 nat.
Check f2.

Definition f3 a := f1 a nat.
Check f3.

Definition f4 x := f1 _ _ x (fun x => x+1). 
Check f4.

Definition f5 x := let f1 (a:Type) (b:Type) (x:a) (f:a->b) := f x in f1 _ _ x (fun x => x+1).
Check f5.

Fixpoint fact (x:nat) := 
match x with
O => 1
|S n => x*(fact n)
end.
Eval compute in fact 3.

Fixpoint inf a b :=
match a, b with
O, O => true
|O, S n => true
|S n, O => false
|S m, S n => inf m n
end.
Eval compute in inf 2 3.

Require Import  List.
Import ListNotations.

Definition length := fun (T:Type) (l:list T) =>
match l with
|[] => 0
|_::l1 => 1+(length l1)
end.
Check length.
Eval compute in length nat [1;2;3;4;5;6].

Fixpoint append (T:Type) (l1:list T) (l2:list T) :=
match l1 with
|[] => l2
|n::h => n::(append T h l2)
end.

Fixpoint reverse (T:Type) (l:list T) :=
match l with
|[] => []
|n::l1 => append T (reverse T l1) [n]
end.
Eval compute in reverse nat [1;2;3;4;5;6].

Module Type tVars.
  Parameter V: Type.
  Parameter veq: V -> V -> bool.
  Parameter vinf: V -> V -> bool.
End tVars.

Module BDD (Vars : tVars).
  Import Vars.

End BDD.


